}
piMpfr()
relErr <- 1 - piMpfr(256, verbose=FALSE) / Const("pi",260)
relErr
asNumeric(-log2(abs(relErr)))
asNumeric(-log10(abs(relErr)))
relErr <- 1 - piMpfr(1000, verbose=FALSE) / Const("pi",1000)
asNumeric(-log10(abs(relErr)))
piMpfr(prec = 1000,itermax = 1000)
piMpfr(prec = 10000,itermax = 1000)
piMpfr(prec = 10000000,itermax = 1000)
piMpfr(prec = 256)
install.packages("ggnetwork")
library(Seurat)
library(SeuratData)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(pbmc3k.SeuratData)
data("pbmc3k)
)
:::
jjjjjj
;;;;
jjijjj)
)))))))))
data("pbmc3k")
head(pbmc)
head(pbmc3k)
head(pbmc3k$seurat_annotations)
pbmc3k@assays$RNA@assay.orig
str(pbmc3k@assays$RNA)
pbmc3k <- UpdateSeuratObject(pbmc3k)
str(pbmc3k@assays$RNA)
pbmc3k
SeuratData::AvailableData()
library(Seurat)
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
data("pbmc3k")
pbmc3k <- UpdateSeuratObject(pbmc3k)
install.packages("sand")
library(reticulate)
os <- import("os")
os <- import("os")
os$listdir(".")
use_condaenv()
py_config()
use_condaenv("sc-analysis")
py_config()
remotes::install_github("tylermorganwall/rayrender")
remotes::install_github("tylermorganwall/rayrender")
devtools::install_local("D://tmp/coronaobj-master.zip")
library(ggplot2)
dat <- read.table(text="Program School1  School2 School3
Program1        1        1       1
Program2        1        0       1
Program3        1        1       0", header=TRUE, stringsAsFactors=FALSE)
dat_long <- reshape2::melt(dat)
View(dat_long)
install.packages('GOplot')
library(GOplot)
# Not run:
# Load the included dataset
data(EC)
# Building the circ object
circ <- circle_dat(EC$david, EC$genelist)
View(circ)
# Building the binary matrix
chord <- chord_dat(circ, EC$genes, EC$process)
View(chord)
GOChord(chord)
library(igraph)
edges1 <- matrix(c(1,3,2,3,3,4,4,5,4,6),byrow = TRUE,ncol = 2)
graph_from_edgelist
edges1 <- matrix(c(1,3,2,3,3,4,4,5,4,6),byrow = TRUE,ncol = 2)
edges1 <- as.data.frame(edges1)
# discrete vs continuous
dat_long <- edges1
dat_long$value <- 1
View(dat_long)
gg <- ggplot(dat_long)
# fill + legend, gray border
gg <- gg + geom_tile(aes(x=Program, y=variable, fill=value), color="#7f7f7f")
# custom fill colors
gg <- gg + scale_fill_manual(values=c("white", "black"))
# squares
gg <- gg + coord_equal()
# no labels
gg <- gg + labs(x=NULL, y=NULL)
# remove some chart junk
gg <- gg + theme_bw()
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg
# fill + legend, gray border
gg <- gg + geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")
gg
gg <- ggplot(dat_long)
# fill + legend, gray border
gg <- gg + geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")
gg
View(dat_long)
mat <- matrix(data = 0,nrow = 6,ncol = 6)
for(ii in 1:6){
mat[edges1[ii,1],edges1[ii,2]] <- 1
}
View(mat)
mat <- matrix(data = 0,nrow = 6,ncol = 6)
for(ii in 1:6){
mat[edges1[ii,1],edges1[ii,2]] <- 1
mat[edges1[ii,2],edges1[ii,1]] <- 1
}
# discrete vs continuous
dat_long <- reshape2::melt(mat)
View(dat_long)
gg <- ggplot(dat_long)
# fill + legend, gray border
gg <- gg + geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")
# custom fill colors
gg <- gg + scale_fill_manual(values=c("white", "black"))
# squares
gg <- gg + coord_equal()
# no labels
gg <- gg + labs(x=NULL, y=NULL)
# remove some chart junk
gg <- gg + theme_bw()
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg
# discrete vs continuous
dat_long <- reshape2::melt(mat)
colnames(dat_long) <- c("V1","V2","value")
gg <- ggplot(dat_long)
# fill + legend, gray border
gg <- gg + geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")
# custom fill colors
gg <- gg + scale_fill_manual(values=c("white", "black"))
# squares
gg <- gg + coord_equal()
# no labels
gg <- gg + labs(x=NULL, y=NULL)
# remove some chart junk
gg <- gg + theme_bw()
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg
dat_long$value <- as.factor(dat_long$value)
colnames(dat_long) <- c("V1","V2","value")
gg <- ggplot(dat_long)
# fill + legend, gray border
gg <- gg + geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")
# custom fill colors
gg <- gg + scale_fill_manual(values=c("white", "black"))
# squares
gg <- gg + coord_equal()
# no labels
gg <- gg + labs(x=NULL, y=NULL)
# remove some chart junk
gg <- gg + theme_bw()
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg
gg+coord_flip()
gg
gg+xlim(c(1:6))
?xlim
gg+xlim(1:6)
as.character(1:6)
gg+xlim(as.character(1:6))
gg+xlim(as.character(1:6))+ylim(as.character(1:6))
gg <- ggplot(dat_long)+
geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+ylim(as.character(1:6))+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
gg
pheatmap::pheatmap(mat = mat)
pheatmap::pheatmap(mat = mat,
cluster_rows = F,
cluster_cols = F)
pheatmap::pheatmap(mat = mat,
cluster_rows = F,
cluster_cols = F,
color = c("black","red"))
image(mat)
pheatmap::pheatmap(mat = mat,
cluster_rows = F,
cluster_cols = F,
color = c("black","red"))
pheatmap::pheatmap(mat = mat,show_rownames = T,
cluster_rows = F,
cluster_cols = F,
color = c("black","red"))
gg <- ggplot(dat_long)+
geom_tile(aes(x=-V1, y=-V2, fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+ylim(as.character(1:6))+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
gg
gg <- ggplot(dat_long)+
geom_tile(aes(x=-V1, y=-V2, fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+ylim(as.character(1:6))+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
gg
?reorder
ggplot(dat_long)+
geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
ylim(as.character(1:6))+
scale_y_reverse()
ggplot(dat_long)+
geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
ylim(as.character(1:6))+
scale_y_reverse()+
scale_x_reverse()
ggplot(dat_long)+
geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
ylim(as.character(1:6))+
scale_x_discrete(as.character(1:6),trans="reverse")+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
scale_y_reverse
gg <- ggplot(dat_long)+
geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
ylim(as.character(1:6))+
scale_y_reverse()+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
gg
gg <- ggplot(dat_long)+
geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
scale_y_reverse()+
ylim(as.character(1:6))
gg <- ggplot(dat_long)+
geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
scale_y_reverse()+
scale_y_discrete(as.character(1:6),trans= reverse_trans())+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
gg <- ggplot(dat_long)+
geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
scale_y_reverse()+
scale_y_continuous(as.character(1:6),trans= reverse_trans())+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
ggplot(dat_long)+
geom_tile(aes(x=V1, y=V2, fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
ylim(as.character(1:6),trans="reverse")
?scale_x_discrete
ggplot(dat_long)+
geom_tile(aes(reorder(V1,V2), fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
ylim(as.character(1:6))+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
ggplot(dat_long)+
geom_tile(aes(reorder(V1,V2),V2,fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
ylim(as.character(1:6))+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
ggplot(dat_long)+
geom_tile(aes(reorder(V1,V2),V2,fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
scale_y_reverse()+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
gg <- ggplot(dat_long)+
geom_tile(aes(V1,V2,fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
scale_y_reverse(as.character(1:6))+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
ggplot(dat_long)+
geom_tile(aes(V1,V2,fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
scale_y_reverse(as.character(1:6))+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
?scale_x_reverse
ggplot(dat_long)+
geom_tile(aes(V1,V2,fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
xlim(as.character(1:6))+
scale_y_reverse(breaks=1:6)+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
ggplot(dat_long)+
geom_tile(aes(V1,V2,fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
scale_x_continuous(breaks = 1:6)+
scale_y_reverse(breaks=1:6)+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
library(igraph)
library(ggplot2)
edges1 <- matrix(c(1,3,2,3,3,4,4,5,4,6),byrow = TRUE,ncol = 2)
### generate adjacency matrix
edges1 <- as.data.frame(edges1)
mat <- matrix(data = 0,nrow = 6,ncol = 6)
for(ii in 1:6){
mat[edges1[ii,1],edges1[ii,2]] <- 1
mat[edges1[ii,2],edges1[ii,1]] <- 1
}
### Prepare data to plot
dat_long <- reshape2::melt(mat)
dat_long$value <- as.factor(dat_long$value)
colnames(dat_long) <- c("V1","V2","value")
### plot
gg <- ggplot(dat_long)+
geom_tile(aes(V1,V2,fill=value), color="#7f7f7f")+
scale_fill_manual(values=c("white", "black"))+
coord_equal()+
labs(x=NULL, y=NULL)+
scale_x_continuous(breaks = 1:6)+
scale_y_reverse(breaks=1:6)+
theme_bw()+
theme(panel.grid=element_blank())+
theme(panel.border=element_blank())
gg
g1 <- graph_from_edgelist(edges1,directed = F)
edges1 <- matrix(c(1,3,2,3,3,4,4,5,4,6),byrow = TRUE,ncol = 2)
g1 <- graph_from_edgelist(edges1,directed = F)
plot(g1,vertex.size=25,edge.width=5,vertex.color="coral")
edges1 <- matrix(c(1,3,2,3,3,4,4,5,4,6),byrow = TRUE,ncol = 2)
g1 <- graph_from_edgelist(edges1,directed = F)
plot(g1,vertex.size=25,edge.width=5,vertex.color="coral")
g1 <- graph_from_adjacency_matrix(mat,mode = "undirected")
plot(g1,vertex.size=25,edge.width=5,vertex.color="coral")
gg
g1 <- graph_from_adjacency_matrix(mat,mode = "undirected")
plot(g1,vertex.size=25,edge.width=5,vertex.color="coral")
g1 <- graph_from_adjacency_matrix(mat,mode = "undirected")
plot(g1,vertex.size=25,edge.width=5,vertex.color="coral")
edges1 <- matrix(c(1,3,2,3,3,4,4,5,4,6),byrow = TRUE,ncol = 2)
g1 <- graph_from_edgelist(edges1,directed = F)
plot(g1,vertex.size=25,edge.width=5,vertex.color="coral")
edges1 <- matrix(c(1,3,2,3,3,4,4,5,4,6),byrow = TRUE,ncol = 2)
g1 <- graph_from_edgelist(edges1,directed = F)
plot(g1,vertex.size=25,edge.width=5,vertex.color="coral")
g1 <- graph_from_adjacency_matrix(mat,mode = "undirected")
plot(g1,vertex.size=25,edge.width=5,vertex.color="coral")
edges1 <- matrix(c(1,3,2,3,3,4,4,5,4,6),byrow = TRUE,ncol = 2)
g1 <- graph_from_edgelist(edges1,directed = F)
plot(g1,vertex.size=25,edge.width=5,vertex.color="coral")
install.packages("rworldmap")
library(ggnetwork)
load("D:/tmp/Moderstatdata/data/dist2009c.RData")
country09 = attr(dist2009c, "Label")
mstree2009 = ape::mst(dist2009c)
gr09 = graph.adjacency(mstree2009, mode = "undirected")
gg = ggnetwork(gr09, arrow.gap = 0, layout = "fruchtermanreingold")
gr09 = graph.adjacency(mstree2009, mode = "undirected")
gg = ggnetwork(gr09, arrow.gap = 0, layout = "fruchtermanreingold")
?ggnetwork
?ggnetwork
gr09 = graph_from_adjacency_matrix(mstree2009, mode = "undirected")
gg = ggnetwork(gr09, arrow.gap = 0, layout = "fruchtermanreingold")
plot(gr09)
# source: ?network::flo
data(flo)
# data example
ggnetwork(flo)
network::flo()
network::flo
library(network)
library(ggnetwork)
# source: ?network::flo
data(neflo)
# data example
ggnetwork(flo)
library(network)
?network::flo
# source: ?network::flo
data(flo)
# data example
ggnetwork(flo)
# plot example
ggplot(ggnetwork(flo), aes(x, y, xend = xend, yend = yend)) +
geom_edges(alpha = 0.5) +
geom_nodes(size = 12, color = "white") +
geom_nodetext(aes(label = vertex.names), fontface = "bold") +
theme_blank()
# data example
ggnetwork(flo)
gg = ggnetwork(mstree2009, arrow.gap = 0, layout = "fruchtermanreingold")
ggplot(gg, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black", alpha = 0.5, curvature = 0.1) +
geom_nodes(aes(color = vertex.names), size = 2) +  theme_blank() +
geom_nodetext(aes(label = vertex.names), color = "black", size = 2.5) +
theme(plot.margin = unit(c(0, 1, 1, 6), "cm"))+
guides(color = guide_legend(keyheight = 0.09, keywidth = 0.09,
title = "Countries")) + theme(legend.position = c(0, 0.14),
legend.background = element_blank(),
legend.text = element_text(size = 7))
ggplot(gg, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black", alpha = 0.5, curvature = 0.1) +
geom_nodes(aes(color = vertex.names), size = 2) +
geom_nodetext_repel(aes(label = vertex.names), color="black", size = 2) +
theme_blank() +
guides(color = guide_legend(keyheight = 0.3, keywidth = 0.3,
override.aes = list(size = 6), title = "Countries"))
library("rworldmap")
mat = match(country09, countriesLow$NAME)
coords2009 = data.frame(
lat = countriesLow$LAT[mat],
lon = countriesLow$LON[mat],
country = country09)
layoutCoordinates = cbind(
x = jitter(coords2009$lon, amount = 15),
y = jitter(coords2009$lat, amount = 8))
labc = names(table(country09)[which(table(country09) > 1)])
matc = match(labc, countriesLow$NAME)
dfc = data.frame(
latc = countriesLow$LAT[matc],
lonc = countriesLow$LON[matc],
labc)
dfctrans = dfc
dfctrans[, 1] = (dfc[,1] + 31) / 93
dfctrans[, 2] = (dfc[,2] + 105) / 238
ggeo09 = ggnetwork(gr09, arrow.gap = 0, layout = layoutCoordinates)
ggplot(ggeo09, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black", alpha = 0.5, curvature = 0.1) +
geom_nodes(aes(color = vertex.names), size = 2) +
theme_blank() +
geom_label(data = dfctrans, aes(x = lonc, xend = lonc, y = latc, yend = latc,
label = labc, fill = labc), colour = "white", alpha = 0.5, size = 3) +
theme(legend.position = "none")
ggeo09 = ggnetwork(mstree2009, arrow.gap = 0, layout = layoutCoordinates)
ggplot(ggeo09, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black", alpha = 0.5, curvature = 0.1) +
geom_nodes(aes(color = vertex.names), size = 2) +
theme_blank() +
geom_label(data = dfctrans, aes(x = lonc, xend = lonc, y = latc, yend = latc,
label = labc, fill = labc), colour = "white", alpha = 0.5, size = 3) +
theme(legend.position = "none")
