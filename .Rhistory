vertex.color=V(g)$color,main="Toy Graph")
legend('right',legend=unique(V(g)$gender),pch=c(19,19),col = c("skyblue","coral"))
set.seed(42)
tmp.df <- layout.graphopt(g)
gg.net = ggnetwork(g,
arrow.gap = 0,
layout = tmp.df)
ggplot(gg.net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black", alpha = 0.5, curvature = 0) +
geom_nodes(aes(color = gender), size = 2) +
scale_color_manual(values = c("skyblue","coral"))+
ggtitle("Toy Graph")+
theme_blank()
set.seed(42)
tmp.df <- layout.graphopt(g)
gg.net = ggnetwork(g,
arrow.gap = 0,
layout = tmp.df)
ggplot(gg.net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black", alpha = 0.5, curvature = 0) +
geom_nodes(aes(color = gender), size = 10) +
scale_color_manual(values = c("skyblue","coral"))+
ggtitle("Toy Graph")+
theme_blank()
set.seed(42)
tmp.df <- layout.graphopt(g)
gg.net = ggnetwork(g,
arrow.gap = 0,
layout = tmp.df)
ggplot(gg.net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black", alpha = 0.5, curvature = 0,arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = gender), size = 10) +
scale_color_manual(values = c("skyblue","coral"))+
ggtitle("Toy Graph")+
theme_blank()
set.seed(42)
tmp.df <- layout.graphopt(g)
gg.net = ggnetwork(g,
arrow.gap = 0,
layout = tmp.df)
ggplot(gg.net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black",
alpha = 0.5, curvature = 0,
arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = gender), size = 10) +
scale_color_manual(values = c("skyblue","coral"))+
ggtitle("Toy Graph")+
theme_blank()
set.seed(42)
tmp.df <- layout.graphopt(g)
gg.net = ggnetwork(g,
arrow.gap = 0,
layout = tmp.df)
ggplot(gg.net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black",
alpha = 0.5, curvature = 0,
arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = gender), size = 10) +
scale_color_manual(values = c("skyblue","coral"))+
ggtitle("Toy Graph")+
theme_blank()
set.seed(42)
tmp.df <- layout.graphopt(g)
gg.net = ggnetwork(g,
arrow.gap = 1,
layout = tmp.df)
ggplot(gg.net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black",
alpha = 0.5, curvature = 0,
arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = gender), size = 10) +
scale_color_manual(values = c("skyblue","coral"))+
ggtitle("Toy Graph")+
theme_blank()
set.seed(42)
tmp.df <- layout.graphopt(g)
gg.net = ggnetwork(g,
arrow.gap = 0.1,
layout = tmp.df)
ggplot(gg.net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black",
alpha = 0.5, curvature = 0,
arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = gender), size = 10) +
scale_color_manual(values = c("skyblue","coral"))+
ggtitle("Toy Graph")+
theme_blank()
set.seed(42)
tmp.df <- layout.graphopt(g)
gg.net = ggnetwork(g,
arrow.gap = 0.01,
layout = tmp.df)
ggplot(gg.net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black",
alpha = 0.5, curvature = 0,
arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = gender), size = 10) +
scale_color_manual(values = c("skyblue","coral"))+
ggtitle("Toy Graph")+
theme_blank()
set.seed(42)
tmp.df <- layout.graphopt(g)
gg.net = ggnetwork(g,
arrow.gap = 0.1,
layout = tmp.df)
ggplot(gg.net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black",
alpha = 0.5, curvature = 0,
arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = gender), size = 10) +
scale_color_manual(values = c("skyblue","coral"))+
ggtitle("Toy Graph")+
theme_blank()
set.seed(42)
tmp.df <- layout.graphopt(g)
gg.net = ggnetwork(g,
arrow.gap = 0.05,
layout = tmp.df)
ggplot(gg.net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black",
alpha = 0.5, curvature = 0,
arrow = arrow(length = unit(6, "pt"),
type = "closed")) +
geom_nodes(aes(color = gender), size = 10) +
scale_color_manual(values = c("skyblue","coral"))+
ggtitle("Toy Graph")+
theme_blank()
head(gg.net)
View(gg.net)
str(gg.net)
set.seed(42)
tmp.df <- layout.graphopt(g)
gg.net = ggnetwork(g,
arrow.gap = 0.05,
layout = tmp.df)
ggplot(gg.net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "black",
alpha = 0.5, curvature = 0,
arrow = arrow(length = unit(6, "pt"),
type = "closed")) +
geom_nodes(aes(color = gender), size = 10) +
geom_nodetext(aes(label = name))+
scale_color_manual(values = c("skyblue","coral"))+
ggtitle("Toy Graph")+
theme_blank()
plot(g,layout=tmp.df,vertex.size=20,
vertex.color=V(g)$color,main="Toy Graph")
legend('right',legend=unique(V(g)$gender),pch=c(19,19),col = c("skyblue","coral"))
library(Rmpfr)
piMpfr <- function(prec=256, itermax = 100, verbose=TRUE) {
m2 <- mpfr(2, prec) # '2' as mpfr number
## -> all derived numbers are mpfr (with precision 'prec')
p <- m2 + sqrt(m2) # 2 + sqrt(2) = 3.414..
y <- sqrt(sqrt(m2)) # 2^ {1/4}
x <- (y+1/y) / m2
it <- 0L
repeat {
p.old <- p
it <- it+1L
p <- p * (1+x) / (1+y)
if(verbose) cat(sprintf("it=%2d, pi^ = %s, |.-.|/|.|=%e\n",
it, formatMpfr(p, min(50, prec/log2(10))), 1-p.old/p))
if (abs(p-p.old) <= m2^(-prec))
break
if(it > itermax) {
warning("not converged in", it, "iterations") ; break
}
## else
s <- sqrt(x)
y <- (y*s + 1/s) / (1+y)
x <- (s+1/s)/2
}
p
}
piMpfr(prec = 256)
piMpfr(prec = 70000)
res <- piMpfr(prec = 70001)
View(res)
res
res[70000]
mod.bigz(res*10^70000,10^70000)
Bernoulli(0:10)
plot(as.numeric(Bernoulli(0:15)), type = "h")
curve(-x*zeta(1-x), -.2, 15.03, n=300,
main = expression(-x %.% zeta(1-x)))
legend("top", paste(c("even","odd  "), "Bernoulli numbers"),
pch=c(1,3), col=2, pt.cex=2, inset=1/64)
abline(h=0,v=0, lty=3, col="gray")
k <- 0:15; k[1] <- 1e-4
points(k, -k*zeta(1-k), col=2, cex=2, pch=1+2*(k%%2))
curve(Ei,  0, 5, n=2001)
## As we now require (mpfrVersion() >= "2.4.0"):
curve(Li2,  0,    5, n=2001)
curve(Li2, -2,   13, n=2000); abline(h=0,v=0, lty=3)
curve(Li2, -200,400, n=2000); abline(h=0,v=0, lty=3)
curve(erf, -3,3, col = "red", ylim = c(-1,2))
curve(erfc, add = TRUE, col = "blue")
abline(h=0, v=0, lty=3)
legend(-3,1, c("erf(x)", "erfc(x)"), col = c("red","blue"), lty=1
getPrec(as(c(1,pi), "mpfr"))
getPrec(as(c(1,pi), "mpfr"))
signif(res,digits = 7)
signif(res,digits = 70000)
signif(res,digits = 70001)
signif(res,digits = 70002)
signif(res,digits = 700)
trunc(res,digits = 700)
trunc(res,digits = 2)
round(res,digits = -2)
round(res,digits = 2)
res <- piMpfr(prec = 70001)
getPrec(res)
res <- piMpfr(prec = 80001)
getPrec(res)
signif(res,digits = 70000)
piMpfr <- function(prec=256, tmp.base=2, itermax = 100, verbose=TRUE) {
m2 <- mpfr(tmp.base, prec) # '2' as mpfr number
## -> all derived numbers are mpfr (with precision 'prec')
p <- m2 + sqrt(m2) # 2 + sqrt(2) = 3.414..
y <- sqrt(sqrt(m2)) # 2^ {1/4}
x <- (y+1/y) / m2
it <- 0L
repeat {
p.old <- p
it <- it+1L
p <- p * (1+x) / (1+y)
if(verbose) cat(sprintf("it=%2d, pi^ = %s, |.-.|/|.|=%e\n",
it, formatMpfr(p, min(50, prec/log2(10))), 1-p.old/p))
if (abs(p-p.old) <= m2^(-prec))
break
if(it > itermax) {
warning("not converged in", it, "iterations") ; break
}
## else
s <- sqrt(x)
y <- (y*s + 1/s) / (1+y)
x <- (s+1/s)/2
}
p
}
res <- piMpfr(prec =10,tmp.base = 10)
library(Rmpfr)
piMpfr <- function(prec=256, tmp.base=2, itermax = 100, verbose=TRUE) {
m2 <- mpfr(2, prec) # '2' as mpfr number
tmp.base <- mpfr(tmp.base,prec)
## -> all derived numbers are mpfr (with precision 'prec')
p <- m2 + sqrt(m2) # 2 + sqrt(2) = 3.414..
y <- sqrt(sqrt(m2)) # 2^ {1/4}
x <- (y+1/y) / m2
it <- 0L
repeat {
p.old <- p
it <- it+1L
p <- p * (1+x) / (1+y)
if(verbose) cat(sprintf("it=%2d, pi^ = %s, |.-.|/|.|=%e\n",
it, formatMpfr(p, min(50, prec/log2(10))), 1-p.old/p))
if (abs(p-p.old) <= tmp.base^(-prec))
break
if(it > itermax) {
warning("not converged in", it, "iterations") ; break
}
## else
s <- sqrt(x)
y <- (y*s + 1/s) / (1+y)
x <- (s+1/s)/2
}
p
}
res <- piMpfr(prec =10,tmp.base = 10)
res <- piMpfr(prec =10,tmp.base = 100)
res
res <- piMpfr(prec =10,tmp.base = 10)
res <- piMpfr(prec =10000,tmp.base = 10)
res
res <- piMpfr(prec =70000,tmp.base = 10)
res
res
res <- piMpfr(prec =70000,tmp.base = 2)
res
res <- piMpfr(prec =700000,tmp.base = 2)
res
signif(res,70000)
library(Rmpfr)
piMpfr <- function(prec=256, tmp.base=2, itermax = 100, verbose=TRUE) {
m2 <- mpfr(2, prec) # '2' as mpfr number
tmp.base <- mpfr(tmp.base,prec)
## -> all derived numbers are mpfr (with precision 'prec')
p <- m2 + sqrt(m2) # 2 + sqrt(2) = 3.414..
y <- sqrt(sqrt(m2)) # 2^ {1/4}
x <- (y+1/y) / m2
it <- 0L
repeat {
p.old <- p
it <- it+1L
p <- p * (1+x) / (1+y)
if(verbose) cat(sprintf("it=%2d, pi^ = %s, |.-.|/|.|=%e\n",
it, formatMpfr(p, min(50, prec/log2(10))), 1-p.old/p))
if (log10(abs(p-p.old)) <= -prec)
break
if(it > itermax) {
warning("not converged in", it, "iterations") ; break
}
## else
s <- sqrt(x)
y <- (y*s + 1/s) / (1+y)
x <- (s+1/s)/2
}
p
}
res <- piMpfr(prec =700000,tmp.base = 2)
res
res <- piMpfr(prec =700,tmp.base = 2)
tmp <- as.numeric(strsplit(as.character(res), "")[[1]])
a <- res
dig <- ceiling(log10(a))
vec1 <- 10^(dig:1)
tmp <- toNum(res)
tmp
tmp <- .mpfr2str(res)
tmp <- as.numeric(strsplit(.mpfr2str(res)[[1]],"")[[1]])
getOption("Rmpfr.print.max.digits", 999L)
getOption("Rmpfr.print.max.digits")
mpfr_default_prec()
.mpfr_maxPrec()
.mpfr_minPrec()
mpfr_default_prec()
res <- piMpfr(prec = 1000)
tmp <- as.numeric(strsplit(.mpfr2str(res)[[1]],"")[[1]])
length(tmp)
res <- piMpfr(prec = 10000)
tmp <- as.numeric(strsplit(.mpfr2str(res)[[1]],"")[[1]])
length(tmp)
res <- piMpfr(prec = 100000)
tmp <- as.numeric(strsplit(.mpfr2str(res)[[1]],"")[[1]])
length(tmp)
res <- piMpfr(prec = 1000000)
View(piMpfr)
piMpfr <- function(prec=256, itermax = 100, verbose=TRUE) {
m2 <- mpfr(2, prec) # '2' as mpfr number
## -> all derived numbers are mpfr (with precision 'prec')
p <- m2 + sqrt(m2) # 2 + sqrt(2) = 3.414..
y <- sqrt(sqrt(m2)) # 2^ {1/4}
x <- (y+1/y) / m2
it <- 0L
repeat {
p.old <- p
it <- it+1L
p <- p * (1+x) / (1+y)
if(verbose) cat(sprintf("it=%2d, pi^ = %s, |.-.|/|.|=%e\n",
it, formatMpfr(p, min(50, prec/log2(10))), 1-p.old/p))
if (abs(p-p.old) <= m2^(-prec))
break
if(it > itermax) {
warning("not converged in", it, "iterations") ; break
}
## else
s <- sqrt(x)
y <- (y*s + 1/s) / (1+y)
x <- (s+1/s)/2
}
p
}
length(tmp)
mpfr_default_prec(10000)
res <- piMpfr(prec = 1000000)
tmp <- as.numeric(strsplit(.mpfr2str(res)[[1]],"")[[1]])
length(tmp)
noquote(unlist(format(.Machine)))
options("digits") $digits
mpfr(2^64,10000)
.mpfr_erange(c("Emin","Emax"))
mpfr_default_prec(100000)
res <- piMpfr(prec = 1000000)
tmp <- as.numeric(strsplit(.mpfr2str(res)[[1]],"")[[1]])
length(tmp)
log2(301031)
options(Rmpfr.print.max.digits = Inf)
res <- piMpfr(prec = 1000000)
tmp <- as.numeric(strsplit(.mpfr2str(res)[[1]],"")[[1]])
length(tmp)
.mpfr_formatinfo(res)
getOption("Rmpfr.print.max.digits"),
getOption("Rmpfr.print.max.digits")
options(Rmpfr.print.max.digits = 1000000)
res <- piMpfr(prec = 1000000)
getOption("Rmpfr.print.max.digits")
tmp <- as.numeric(strsplit(.mpfr2str(res)[[1]],"")[[1]])
length(tmp)
# C r e a t e E u l e r ’ s f u n c t i o n
euler_fun = function (m , approx = TRUE ) {
o = as . bigq ( NULL )
for ( k in 1: m ) {
r = as . bigz (1: k )
o = c (o , prod ( r ) / prod (2* r +1 ) )
}
o_sum = 2*(1+ sum ( o ) )
if ( approx ) {
as . numeric ( o_sum )
} else {
o_sum
}
}
# C r e a t e E u l e r ’ s f u n c t i o n
euler_fun <- function (m , approx = TRUE ){
o = as . bigq ( NULL )
for ( k in 1: m ) {
r = as . bigz (1: k )
o = c (o , prod ( r ) / prod (2* r +1 ) )
}
o_sum = 2*(1+ sum ( o ) )
if ( approx ) {
as . numeric ( o_sum )
} else {
o_sum
}
}
# C r e a t e E u l e r ’ s f u n c t i o n
euler_fun <- function (m , approx = TRUE ){
o = as.bigq ( NULL )
for ( k in 1: m ) {
r = as.bigz (1: k )
o = c (o , prod ( r ) / prod (2* r +1 ) )
}
o_sum = 2*(1+ sum ( o ) )
if ( approx ) {
as.numeric ( o_sum )
} else {
o_sum
}
}
x = euler_fun (250 , approx = FALSE )
mpfr (x ,256) # S p e c i f y t h e n u m b e r o f b i t s
x
x = euler_fun (2500 , approx = FALSE )
5 %% 2
for(ii in 1:1000){
res <- c(res,ii^4 %% 4 )
}
res <- c()
for(ii in 1:1000){
res <- c(res,ii^4 %% 4 )
}
table(res)
132/4
for(ii in 1:1000){
res <- c(res,ii^4 %% 2 )
}
table(res)
res <- c()
for(ii in 1:1000){
res <- c(res,ii^4 %% 3 )
}
table(res)
for(ii in 1:1000){
res <- c(res,ii^4 %% 5 )
}
table(res)
131 %% c(2,3,4,5,6,7)
131 %% 2:131
for(ii in 1:1000){
res <- c(res,ii^4 + 131 %% 4 )
}
table(res)
res <- c()
for(ii in 1:1000){
res <- c(res,ii^4 + 131 %% 4 )
}
table(res)
res <- c()
for(ii in 1:1000){
res <- c(res,（ii^4 + 131) %% 4 )
}
table(res)
res <- c()
for(ii in 1:1000){
res <- c(res,（ii^4 + 131) %% 4 )
}
res <- c()
for(ii in 1:1000){
res <- c(res,(ii^4 + 131) %% 4 )
}
table(res)
res <- c()
for(ii in 1:1000){
res <- c(res,(ii^4 + 131) %% 3 )
}
table(res)
res <- c()
for(ii in 1:1000){
res <- c(res,(ii^5 + 131) %% 3 )
}
table(res)
res <- c()
for(ii in 1:1000){
res <- c(res,(ii^5 + 131) %% 7 )
}
table(res)
res <- c()
for(ii in 1:1000){
res <- c(res,(ii^5 + 131) %% 6 )
}
table(res)
res <- c()
for(ii in 1:1000){
res <- c(res,(ii^5 + 120) %% 6 )
}
table(res)
res <- c()
for(ii in 1:1000){
res <- c(res,(ii^5 + 120) %% 2 )
}
table(res)
