cbmc[["RNA"]]@counts[1:10,1:10]
### show default assay
DefaultAssay(cbmc)
# standard log-normalization
cbmc <- NormalizeData(cbmc)
# choose ~1k variable features
cbmc <- FindVariableFeatures(cbmc)
# standard scaling (no regression)
cbmc <- ScaleData(cbmc)
# Run PCA, select 13 PCs for tSNE visualization and graph-based clustering
cbmc <- RunPCA(cbmc, verbose = FALSE)
ElbowPlot(cbmc, ndims = 50)
# standard log-normalization
cbmc <- NormalizeData(cbmc)
# choose ~1k variable features
cbmc <- FindVariableFeatures(cbmc)
# standard scaling (no regression)
cbmc <- ScaleData(cbmc)
# Run PCA, select 13 PCs for tSNE visualization and graph-based clustering
cbmc <- RunPCA(cbmc, verbose = FALSE)
ElbowPlot(cbmc, ndims = 50)
ElbowPlot(cbmc, ndims = 50)
ElbowPlot(cbmc, ndims = 50)
ElbowPlot(cbmc, ndims = 50)
cbmc <- FindNeighbors(cbmc, dims = 1:25)
cbmc <- FindClusters(cbmc, resolution = 0.8)
cbmc <- RunTSNE(cbmc, dims = 1:25, method = "FIt-SNE")
# Find the markers that define each cluster, and use these to annotate the clusters, we use
# max.cells.per.ident to speed up the process
cbmc.rna.markers <- FindAllMarkers(cbmc, max.cells.per.ident = 100, min.diff.pct = 0.3, only.pos = TRUE)
# Note, for simplicity we are merging two CD14+ Monocyte clusters (that differ in expression of
# HLA-DR genes) and NK clusters (that differ in cell cycle stage)
new.cluster.ids <- c("Memory CD4 T", "CD14+ Mono", "Naive CD4 T", "NK", "CD14+ Mono", "Mouse", "B",
"CD8 T", "CD16+ Mono", "T/Mono doublets", "NK", "CD34+", "Multiplets", "Mouse", "Eryth", "Mk",
"Mouse", "DC", "pDCs")
names(new.cluster.ids) <- levels(cbmc)
cbmc <- RenameIdents(cbmc, new.cluster.ids)
DimPlot(cbmc, label = TRUE) + NoLegend()
DimPlot(cbmc, label = TRUE) + NoLegend()
ElbowPlot(cbmc, ndims = 50)
# Now we can repeat the preprocessing (normalization and scaling) steps that we typically run
# with RNA, but modifying the 'assay' argument.  For CITE-seq data, we do not recommend typical
# LogNormalization. Instead, we use a centered log-ratio (CLR) normalization, computed
# independently for each feature.  This is a slightly improved procedure from the original
# publication, and we will release more advanced versions of CITE-seq normalizations soon.
cbmc <- NormalizeData(cbmc, assay = "ADT", normalization.method = "CLR")
cbmc <- ScaleData(cbmc, assay = "ADT")
DimPlot(cbmc, label = TRUE) + NoLegend()
DimPlot(cbmc, label = TRUE) + NoLegend()
# in this plot, protein (ADT) levels are on top, and RNA levels are on the bottom
FeaturePlot(cbmc,
features = c("adt_CD3", "adt_CD11c",
"adt_CD8", "adt_CD16",
"CD3E", "ITGAX", "CD8A", "FCGR3A"),
min.cutoff = "q05",
max.cutoff = "q95",
ncol = 4)
# in this plot, protein (ADT) levels are on top, and RNA levels are on the bottom
FeaturePlot(cbmc,
features = c("adt_CD3", "adt_CD11c",
"adt_CD8", "adt_CD16",
"CD3E", "ITGAX", "CD8A", "FCGR3A"),
min.cutoff = "q05",
max.cutoff = "q95",
ncol = 4)
# in this plot, protein (ADT) levels are on top, and RNA levels are on the bottom
FeaturePlot(cbmc,
features = c("adt_CD3", "adt_CD11c",
"adt_CD8", "adt_CD16",
"CD3E", "ITGAX", "CD8A", "FCGR3A"),
min.cutoff = "q05",
max.cutoff = "q95",
ncol = 2)
# in this plot, protein (ADT) levels are on top, and RNA levels are on the bottom
FeaturePlot(cbmc,
features = c("adt_CD3", "adt_CD11c",
"adt_CD8", "adt_CD16",
"CD3E", "ITGAX", "CD8A", "FCGR3A"),
min.cutoff = "q05",
max.cutoff = "q95",
ncol = 2)
# in this plot, protein (ADT) levels are on top, and RNA levels are on the bottom
FeaturePlot(cbmc,
features = c("adt_CD3", "adt_CD11c",
"adt_CD8", "adt_CD16",
"CD3E", "ITGAX", "CD8A", "FCGR3A"),
min.cutoff = "q05",
max.cutoff = "q95",
ncol = 2)
RidgePlot(cbmc, features = c("adt_CD3", "adt_CD8", "CD3E","CD8A"), ncol = 2)
RidgePlot(cbmc, features = c("adt_CD3", "adt_CD8", "CD3E","CD8A"), ncol = 2)
RidgePlot(cbmc, features = c("adt_CD3", "adt_CD8", "CD3E","CD8A"), ncol = 2)
RidgePlot(cbmc, features = c("adt_CD3", "adt_CD8", "CD3E","CD8A"), ncol = 2)
RidgePlot(cbmc, features = c("adt_CD3", "adt_CD8", "CD3E","CD8A"),ncol = 2)
# Draw ADT scatter plots (like biaxial plots for FACS). Note that you can even 'gate' cells if
# desired by using HoverLocator and FeatureLocator
FeatureScatter(cbmc, feature1 = "adt_CD19", feature2 = "adt_CD3")
# view relationship between protein and RNA
FeatureScatter(cbmc, feature1 = "adt_CD3", feature2 = "CD3E",smooth = T)
# view relationship between protein and RNA
FeatureScatter(cbmc, feature1 = "adt_CD3", feature2 = "CD3E",smooth = T,span = T)
# view relationship between protein and RNA
FeatureScatter(cbmc, feature1 = "adt_CD3", feature2 = "CD3E")
# Let's plot CD4 vs CD8 levels in T cells
tcells <- subset(cbmc, idents = c("Naive CD4 T", "Memory CD4 T", "CD8 T"))
FeatureScatter(tcells, feature1 = "adt_CD4", feature2 = "adt_CD8")
# # Let's look at the raw (non-normalized) ADT counts. You can see the values are quite high,
# particularly in comparison to RNA values. This is due to the significantly higher protein copy
# number in cells, which significantly reduces 'drop-out' in ADT data
FeatureScatter(tcells, feature1 = "adt_CD4", feature2 = "adt_CD8", slot = "counts")
# Downsample the clusters to a maximum of 300 cells each (makes the heatmap easier to see for small clusters)
cbmc.small <- subset(cbmc, downsample = 300)
# Find protein markers for all clusters, and draw a heatmap
adt.markers <- FindAllMarkers(cbmc.small, assay = "RNA", only.pos = TRUE)
# Downsample the clusters to a maximum of 300 cells each (makes the heatmap easier to see for small clusters)
cbmc.small <- subset(cbmc, downsample = 300)
# Downsample the clusters to a maximum of 300 cells each (makes the heatmap easier to see for small clusters)
cbmc.small <- subset(cbmc, downsample = 300)
# Find protein markers for all clusters, and draw a heatmap
adt.markers <- FindAllMarkers(cbmc.small, assay = "ADT", only.pos = TRUE)
rownames(cbmc.small[["ADT"]]@counts)
DoHeatmap
Seurat:::SingleRasterMap()
Seurat:::SingleRasterMap
Seurat:::PurpleAndYellow()
# using code from RColorBrewer to demo the palette
n = 200
image(
1:n, 1, as.matrix(1:n),
col = Seurat:::PurpleAndYellow(k=n),
xlab = "PurpleAndYellow n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
library(ggplot2)
library(patchwork)
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(c("navy", "white", "firebrick3"))(50),
xlab = "PurpleAndYellow n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(c("navy", "white", "firebrick3"))(n),
xlab = "PurpleAndYellow n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(RColorBrewer::brewer.pal(10,"RdBu"))(n),
xlab = "PurpleAndYellow n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
RColorBrewer::brewer.pal(8,"RdBu")
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(RColorBrewer::brewer.pal(8,"RdBu"))(n),
xlab = "PurpleAndYellow n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
RColorBrewer::brewer.pal(12,"RdBu")
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(RColorBrewer::brewer.pal(11,"RdBu"))(n),
xlab = "PurpleAndYellow n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT", angle = 90)+scale_color_gradientn(colors = colorRampPalette(RColorBrewer::brewer.pal(11,"RdBu"))(200))
DoHeatmap(object = pbmc_small) + scale_fill_gradientn(colors = c("blue", "white", "red"))
DoHeatmap(object = pbmc_small,group.colors = c("red", "blue")) +
scale_fill_gradientn(colors = c("blue", "white", "red"))
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT", angle = 90)+
scale_fill_gradientn(colors = c("blue", "white", "red"))
RColorBrewer::brewer.pal(11,"RdBu")
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT", angle = 90)+viridis::scale_color_viridis()
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT", angle = 90)+viridis::scale_fill_viridis()
?DoHeatmap
viridis::scale_fill_viridis
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT", angle = 90)+scale_fill_gradientn(colours = colorRampPalette(c("navy", "white", "firebrick3"))(256))
mapal <- colorRampPalette(RColorBrewer::brewer.pal(11,"RdBu"))(256)
mapal <- colorRampPalette(RColorBrewer::brewer.pal(11,"RdBu"))(256)
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = mapal)
# using code from RColorBrewer to demo the palette
n = 200
image(
1:n, 1, as.matrix(1:n),
col = Seurat:::PurpleAndYellow(k=n),
xlab = "PurpleAndYellow n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(c("navy", "white", "firebrick3"))(n),
xlab = "NavyWhite3Firebrick3 n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(RColorBrewer::brewer.pal(11,"RdBu"))(n),
xlab = "RdBu n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
par(mfrow=c(3,1))
image(
1:n, 1, as.matrix(1:n),
col = Seurat:::PurpleAndYellow(k=n),
xlab = "PurpleAndYellow n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(c("navy", "white", "firebrick3"))(n),
xlab = "NavyWhite3Firebrick3 n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(RColorBrewer::brewer.pal(11,"RdBu"))(n),
xlab = "RdBu n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
# using code from RColorBrewer to demo the palette
n = 200
par(mfrow=c(3,1))
image(
1:n, 1, as.matrix(1:n),
col = Seurat:::PurpleAndYellow(k=n),
xlab = "PurpleAndYellow n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(c("navy", "white", "firebrick3"))(n),
xlab = "NavyWhite3Firebrick3 n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(RColorBrewer::brewer.pal(11,"RdBu"))(n),
xlab = "RdBu n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
mypal <- colorRampPalette(c("navy", "white", "red"))(256)
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = mapal)
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = rev(mapal))
DoHeatmap(pbmc_small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = rev(mapal))
DoHeatmap(pbmc_small,
features = unique(adt.markers$gene),
assay = "RNA",
angle = 90,size = 3)+
scale_fill_gradientn(colours = rev(mapal))
DoHeatmap(pbmc_small,
angle = 90,size = 3)+
scale_fill_gradientn(colours = rev(mapal))
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = rev(mapal))
mypal2 <- colorRampPalette(c("navy", "white", "firebrick3"))(256)
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = rev(mapal2))
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = rev(mypal2))
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = mypal)
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = mypal)
mapal <- rev(colorRampPalette(RColorBrewer::brewer.pal(11,"RdBu"))(256))
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = mypal)
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = mypal)
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colours = mypal)
mapal <- rev(colorRampPalette(RColorBrewer::brewer.pal(11,"RdBu"))(256))
#mypal2 <- colorRampPalette(c("navy", "white", "firebrick3"))(256)
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colors  = mypal)
mypal <- rev(colorRampPalette(RColorBrewer::brewer.pal(11,"RdBu"))(256))
#mypal2 <- colorRampPalette(c("navy", "white", "firebrick3"))(256)
DoHeatmap(cbmc.small,
features = unique(adt.markers$gene),
assay = "ADT",
angle = 90,size = 3)+
scale_fill_gradientn(colors  = mypal)
# You can see that our unknown cells co-express both myeloid and lymphoid markers (true at the
# RNA level as well). They are likely cell clumps (multiplets) that should be discarded. We'll
# remove the mouse cells now as well
cbmc <- subset(cbmc, idents = c("Multiplets", "Mouse"), invert = TRUE)
# Because we're going to be working with the ADT data extensively, we're going to switch the
# default assay to the 'CITE' assay.  This will cause all functions to use ADT data by default,
# rather than requiring us to specify it each time
DefaultAssay(cbmc) <- "ADT"
cbmc <- RunPCA(cbmc, features = rownames(cbmc), reduction.name = "pca_adt", reduction.key = "pca_adt_",
verbose = FALSE)
DimPlot(cbmc, reduction = "pca_adt")
# Since we only have 10 markers, instead of doing PCA, we'll just use a standard euclidean
# distance matrix here.  Also, this provides a good opportunity to demonstrate how to do
# visualization and clustering using a custom distance matrix in Seurat
adt.data <- GetAssayData(cbmc, slot = "data")
adt.dist <- dist(t(adt.data))
# Before we recluster the data on ADT levels, we'll stash the RNA cluster IDs for later
cbmc[["rnaClusterID"]] <- Idents(cbmc)
# Now, we rerun tSNE using our distance matrix defined only on ADT (protein) levels.
cbmc[["tsne_adt"]] <- RunTSNE(adt.dist, assay = "ADT", reduction.key = "adtTSNE_")
cbmc[["adt_snn"]] <- FindNeighbors(adt.dist)$snn
cbmc <- FindClusters(cbmc, resolution = 0.2, graph.name = "adt_snn")
# We can compare the RNA and protein clustering, and use this to annotate the protein clustering
# (we could also of course use FindMarkers)
clustering.table <- table(Idents(cbmc), cbmc$rnaClusterID)
clustering.table
new.cluster.ids <- c("CD4 T", "CD14+ Mono", "NK", "B", "CD8 T", "NK", "CD34+", "T/Mono doublets",
"CD16+ Mono", "pDCs", "B")
names(new.cluster.ids) <- levels(cbmc)
cbmc <- RenameIdents(cbmc, new.cluster.ids)
tsne_rnaClusters <- DimPlot(cbmc, reduction = "tsne_adt", group.by = "rnaClusterID") + NoLegend()
tsne_rnaClusters <- tsne_rnaClusters + ggtitle("Clustering based on scRNA-seq") + theme(plot.title = element_text(hjust = 0.5))
tsne_rnaClusters <- LabelClusters(plot = tsne_rnaClusters, id = "rnaClusterID", size = 4)
tsne_adtClusters <- DimPlot(cbmc, reduction = "tsne_adt", pt.size = 0.5) + NoLegend()
tsne_adtClusters <- tsne_adtClusters + ggtitle("Clustering based on ADT signal") + theme(plot.title = element_text(hjust = 0.5))
tsne_adtClusters <- LabelClusters(plot = tsne_adtClusters, id = "ident", size = 4)
# Note: for this comparison, both the RNA and protein clustering are visualized on a tSNE
# generated using the ADT distance matrix.
wrap_plots(list(tsne_rnaClusters, tsne_adtClusters), ncol = 2)
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
### AvailableData() check avaliable data: we choose cbmc
### InstallData('cbmc')
library(cbmc.SeuratData)
data("cbmc")
### expression matrix
cbmc[["RNA"]]@counts[1:10,1:10]
### ADT count matrix
### Actually there are just 10 surface protein
cbmc[["ADT"]]@counts[1:10,1:10]
### show default assay
DefaultAssay(cbmc)
# standard log-normalization
cbmc <- NormalizeData(cbmc)
# choose ~1k variable features
cbmc <- FindVariableFeatures(cbmc)
# standard scaling (no regression)
cbmc <- ScaleData(cbmc)
# Run PCA, select 13 PCs for tSNE visualization and graph-based clustering
cbmc <- RunPCA(cbmc, verbose = FALSE)
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
### AvailableData() check avaliable data: we choose cbmc
### InstallData('cbmc')
library(cbmc.SeuratData)
data("cbmc")
### expression matrix
cbmc[["RNA"]]@counts[1:10,1:10]
### ADT count matrix
### Actually there are just 10 surface protein
cbmc[["ADT"]]@counts[1:10,1:10]
### show default assay
DefaultAssay(cbmc)
# standard log-normalization
cbmc <- NormalizeData(cbmc)
# choose ~1k variable features
cbmc <- FindVariableFeatures(cbmc)
# standard scaling (no regression)
cbmc <- ScaleData(cbmc)
# Run PCA, select 13 PCs for tSNE visualization and graph-based clustering
cbmc <- RunPCA(cbmc, verbose = FALSE)
ElbowPlot(cbmc, ndims = 50)
# using code from RColorBrewer to demo the palette
n = 200
par(mfrow=c(3,1))
image(
1:n, 1, as.matrix(1:n),
col = Seurat:::PurpleAndYellow(k=n),
xlab = "PurpleAndYellow n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(c("navy", "white", "firebrick3"))(n),
xlab = "NavyWhite3Firebrick3 n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
image(
1:n, 1, as.matrix(1:n),
col = colorRampPalette(RColorBrewer::brewer.pal(11,"RdBu"))(n),
xlab = "RdBu n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
adt.markers$gene
Seurat::FeaturePlot
install.packages("gmp")
library(Seurat)
install.packages("gmp")
install.packages("gmp")
library(gmp)
gcd.bigz(210,342) # or also
lcm.bigz(210,342)
a <- 210 ; b <- 342
stopifnot(gcd.bigz(a,b) * lcm.bigz(a,b) == a * b)
## or
(a <- as.bigz("82696155787249022588"))
(b <- as.bigz("65175989479756205392"))
gcd(a,b) # 4
stopifnot(gcd(a,b) * lcm.bigz(a,b) == a * b)
Stirling1(7,2)
Stirling1(70,2)
data(Oakley1)
(M1 <- modulus(Oakley1))
isprime(M1)# '1' : "probably prime"
sizeinbase(M1)# 232 digits (was 309 in older version)
head(M1)
install.packages("Rmpfr")
library(Rmpfr)
system.time(Pi <- Const("pi", 1000 *log2(10)))
Pi
1000 *log2(10)
piMpfr <- function(prec=256, itermax = 100, verbose=TRUE) {
m2 <- mpfr(2, prec) # '2' as mpfr number
## -> all derived numbers are mpfr (with precision 'prec')
p <- m2 + sqrt(m2) # 2 + sqrt(2) = 3.414..
y <- sqrt(sqrt(m2)) # 2^ {1/4}
x <- (y+1/y) / m2
it <- 0L
repeat {
p.old <- p
it <- it+1L
p <- p * (1+x) / (1+y)
if(verbose) cat(sprintf("it=%2d, pi^ = %s, |.-.|/|.|=%e\n",
it, formatMpfr(p, min(50, prec/log2(10))), 1-p.old/p))
if (abs(p-p.old) <= m2^(-prec))
break
if(it > itermax) {
warning("not converged in", it, "iterations") ; break
}
## else
s <- sqrt(x)
y <- (y*s + 1/s) / (1+y)
x <- (s+1/s)/2
}
p
}
piMpfr()
relErr <- 1 - piMpfr(256, verbose=FALSE) / Const("pi",260)
relErr
asNumeric(-log2(abs(relErr)))
asNumeric(-log10(abs(relErr)))
relErr <- 1 - piMpfr(1000, verbose=FALSE) / Const("pi",1000)
asNumeric(-log10(abs(relErr)))
piMpfr(prec = 1000,itermax = 1000)
piMpfr(prec = 10000,itermax = 1000)
piMpfr(prec = 10000000,itermax = 1000)
piMpfr(prec = 256)
install.packages("ggnetwork")
library(Seurat)
library(SeuratData)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(pbmc3k.SeuratData)
data("pbmc3k)
)
:::
jjjjjj
;;;;
jjijjj)
)))))))))
data("pbmc3k")
head(pbmc)
head(pbmc3k)
head(pbmc3k$seurat_annotations)
pbmc3k@assays$RNA@assay.orig
str(pbmc3k@assays$RNA)
pbmc3k <- UpdateSeuratObject(pbmc3k)
str(pbmc3k@assays$RNA)
pbmc3k
